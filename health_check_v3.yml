---
- name: PostgreSQL HealthCheck + Web (Apache + templates)
  hosts: db_servers
  become: true
  gather_facts: true

  vars:
    pg_user: "postgres"
    # valor inicial; será sobrescrito por SHOW data_directory (se possível)
    pg_data_dir: "/var/lib/pgsql/data"
    log_tail_lines: 200
    web_root: "/var/www/html/pg-health"
    db_name: "{{ target_db | default('postgres') }}"
    schema_name: "{{ target_schema | default('public') }}"

  pre_tasks:
    - name: Definir uptime humano
      ansible.builtin.set_fact:
        uptime_h: >-
          {{ (ansible_facts.uptime_seconds | int) // 86400 }}d
          {{ ((ansible_facts.uptime_seconds | int) % 86400) // 3600 }}h
          {{ (((ansible_facts.uptime_seconds | int) % 3600) // 60) }}m

    - name: Coletar facts de serviços (sem alterar estado)
      ansible.builtin.service_facts:

  tasks:
    # ====== SO ======
    - name: Sysctl relevantes
      ansible.builtin.shell: |
        sysctl -n vm.swappiness || true
        sysctl -n vm.dirty_background_ratio || true
        sysctl -n vm.dirty_ratio || true
      register: sysctl_out
      changed_when: false

    - name: THP status
      ansible.builtin.shell: |
        E=/sys/kernel/mm/transparent_hugepage/enabled
        D=/sys/kernel/mm/transparent_hugepage/defrag
        echo -n "enabled: "; (test -r "$E" && cat "$E") || echo "n/a"
        echo -n "defrag:  "; (test -r "$D" && cat "$D") || echo "n/a"
      register: thp_out
      changed_when: false

    # ====== Serviço / versão / dirs ======
    - name: Status do serviço (via service_facts)
      ansible.builtin.set_fact:
        _svc_state: "{{ ansible_facts.services['postgresql.service'].state
                        if 'postgresql.service' in ansible_facts.services else 'unknown' }}"
        _svc_status: "{{ ansible_facts.services['postgresql.service'].status
                        if 'postgresql.service' in ansible_facts.services else 'unknown' }}"

    - name: Habilitado no boot?
      ansible.builtin.command: systemctl is-enabled postgresql
      register: svc_enabled
      failed_when: false
      changed_when: false

    - name: Versão do binário
      ansible.builtin.command: postgres -V
      register: bin_ver
      failed_when: false
      changed_when: false

    - name: Descobrir data_directory pelo Postgres
      become_user: "{{ pg_user }}"
      ansible.builtin.command: psql -tAc "SHOW data_directory;"
      register: data_dir_q
      failed_when: false
      changed_when: false

    - name: Ajustar pg_data_dir conforme SHOW data_directory
      ansible.builtin.set_fact:
        pg_data_dir: "{{ (data_dir_q.stdout | trim) if (data_dir_q.stdout | trim) else pg_data_dir }}"

    - name: Diretórios e ownership (resumo)
      ansible.builtin.shell: |
        echo "PGDATA={{ pg_data_dir }}"
        ls -ld "$(dirname '{{ pg_data_dir }}')" "{{ pg_data_dir }}" 2>/dev/null || true
      register: dir_out
      changed_when: false

    # ====== Rede / portas / firewall / SELinux ======
    - name: Rede e portas / Firewall / SELinux
      ansible.builtin.shell: |
        ss -ltnp | grep ':5432 ' || true
        echo "---"
        firewall-cmd --list-ports 2>/dev/null || echo "firewalld: n/a"
        echo -n "SELinux: "; (getenforce 2>/dev/null || echo "n/a")
      register: net_out
      changed_when: false

    # ====== Autenticação (hba) ======
    - name: Caminho do pg_hba.conf
      become_user: "{{ pg_user }}"
      ansible.builtin.command: psql -tAc "SHOW hba_file;"
      register: hba_path
      changed_when: false

    - name: Primeiras 120 linhas do pg_hba.conf
      ansible.builtin.shell: |
        H="{{ hba_path.stdout | trim }}"
        [ -r "$H" ] && sed -n '1,120p' "$H" || echo "pg_hba.conf não legível"
      register: hba_head
      changed_when: false

    # ====== Bancos / roles / dono do DB alvo ======
    - name: Listar bancos e roles + dono do DB alvo
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        echo "-- databases --"
        psql -tAc "SELECT datname FROM pg_database WHERE datistemplate=false ORDER BY datname;" || true
        echo "-- roles --"
        psql -tAc "SELECT rolname, rolsuper, rolcanlogin FROM pg_roles ORDER BY rolname;" || true
        echo "-- owner --"
        psql -tAc "SELECT pg_catalog.pg_get_userbyid(datdba)
                   FROM pg_database
                   WHERE datname='{{ db_name }}';" || true
      register: acc_out
      changed_when: false

    # ====== Conexões / estados / idle in txn ======
    - name: Conexões e estados
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        psql -tAc "SHOW max_connections;" || true
        psql -tAc "SELECT count(*) FROM pg_stat_activity;" || true
        psql -tAc "SELECT state, count(*) FROM pg_stat_activity GROUP BY state;" || true
      register: conns_out
      changed_when: false

    - name: Top 10 idle in transaction
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        psql -F $'\t' -A -c \
        "SELECT pid, usename, state, wait_event_type, wait_event, now()-xact_start AS xact_age, left(query,80) AS query
         FROM pg_stat_activity WHERE state='idle in transaction'
         ORDER BY xact_start NULLS LAST LIMIT 10;" || true
      register: idle_out
      changed_when: false

    # ====== Storage / WAL ======
    - name: Espaço em /var/lib/pgsql (ou data_directory)
      ansible.builtin.command: df -h "{{ pg_data_dir | dirname }}"
      register: disk_out
      failed_when: false
      changed_when: false

    - name: WAL e bgwriter
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        echo "-- wal_level --"
        psql -tAc "SHOW wal_level;" || true
        echo "-- bgwriter --"
        psql -x -c "SELECT checkpoints_timed, checkpoints_req, buffers_checkpoint,
                           buffers_clean, maxwritten_clean, buffers_backend
                    FROM pg_stat_bgwriter;" || true
      register: wal_out
      changed_when: false

    # ====== Configs-chave ======
    - name: Parâmetros de configuração (sanidade)
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        psql -tAc "SHOW config_file;" || true
        psql -tAc "SHOW shared_buffers;" || true
        psql -tAc "SHOW work_mem;" || true
        psql -tAc "SHOW maintenance_work_mem;" || true
        psql -tAc "SHOW effective_cache_size;" || true
        psql -tAc "SHOW max_wal_size;" || true
        psql -tAc "SHOW timezone;" || true
        psql -tAc "SHOW log_min_duration_statement;" || true
      register: conf_out
      changed_when: false

    # ====== Logs ======
    - name: Informações de log (dir/arquivo atual) + erros
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        LOGDIR=$(psql -tAc "SHOW log_directory;" | tr -d ' ')
        echo "-- log_directory --"
        echo "$LOGDIR"
        echo "-- log_filename --"
        psql -tAc "SHOW log_filename;" || true
        LAST=$(ls -1t "{{ pg_data_dir }}/$LOGDIR" 2>/dev/null | head -1)
        echo "-- tail_errors --"
        tail -n {{ log_tail_lines }} "{{ pg_data_dir }}/$LOGDIR/$LAST" 2>/dev/null | egrep -i "ERROR|FATAL|PANIC" || true
      register: logs_out
      changed_when: false

    # ====== Extensões / Schemas / Tabelas / Replicação ======
    - name: Extensões e schemas do DB alvo
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        DB="{{ db_name }}"
        echo "-- extensions --"
        psql -d "$DB" -tAc "SELECT extname, extversion FROM pg_extension;" || true
        echo "-- schemas --"
        psql -d "$DB" -tAc "SELECT nspname FROM pg_namespace WHERE nspname NOT LIKE 'pg_%' AND nspname <> 'information_schema' ORDER BY 1;" || true
      register: exts_out
      changed_when: false

    - name: Privilegios em schema (lista + dono)
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        DB="{{ db_name }}"
        SCHEMA="{{ schema_name }}"
        psql -d "$DB" -x -c "SELECT nspname, pg_get_userbyid(nspowner) AS owner FROM pg_namespace WHERE nspname='$SCHEMA';" || true
        psql -d "$DB" -c "SELECT table_schema, table_name FROM information_schema.tables WHERE table_schema='$SCHEMA' ORDER BY 1,2 LIMIT 20;" || true
      register: schema_out
      changed_when: false

    - name: Replicação e tabelas quentes
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        DB="{{ db_name }}"
        echo "-- recovery? --"
        psql -tAc "SELECT pg_is_in_recovery();" || true
        echo "-- replicas --"
        psql -x -c "SELECT client_addr, state, sync_state, write_lag, flush_lag, replay_lag FROM pg_stat_replication;" || true
        echo "-- hot tables --"
        psql -d "$DB" -x -c \
        "SELECT relname, seq_scan, idx_scan, n_tup_ins, n_tup_upd, n_tup_del
         FROM pg_stat_user_tables
         ORDER BY (n_tup_ins+n_tup_upd+n_tup_del) DESC NULLS LAST LIMIT 10;" || true
        echo "-- vacuum/analyze --"
        psql -d "$DB" -x -c \
        "SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze
         FROM pg_stat_user_tables ORDER BY last_autovacuum NULLS FIRST LIMIT 10;" || true
      register: repl_hot_out
      changed_when: false

    # ====== DNS (extra) ======
    - name: DNS/resolv
      ansible.builtin.shell: |
        grep -E '^(nameserver|search|domain)' /etc/resolv.conf 2>/dev/null || echo "resolv.conf n/a"
      register: dns_out
      changed_when: false

    # ====== Postgres básico (bloco simples para parse do front) ======
    - name: Postgres básico (via socket) – bloco simples
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        psql -tAc "SELECT version();"                || true
        psql -tAc "SHOW server_version_num;"        || true
        psql -tAc "SHOW listen_addresses;"          || true
        psql -tAc "SHOW port;"                      || true
        psql -tAc "SHOW config_file;"               || true
        psql -tAc "SHOW hba_file;"                  || true
        psql -tAc "SHOW log_directory;"             || true
        psql -tAc "SELECT count(*) FROM pg_stat_activity;" || true
      register: psql_basic
      changed_when: false

    - name: Tamanhos por DB
      become_user: "{{ pg_user }}"
      ansible.builtin.command: >
        psql -tAc
        "SELECT datname, pg_size_pretty(pg_database_size(datname))
         FROM pg_database
         WHERE datistemplate=false
         ORDER BY 2 DESC;"
      register: db_sizes
      changed_when: false

    # ====== Monta dicionário ======
    - name: Consolidar relatório
      ansible.builtin.set_fact:
        report:
          collected_at: "{{ ansible_date_time.iso8601 }}"
          host: "{{ inventory_hostname }}"
          os:
            distro: "{{ (ansible_facts.distribution | default(ansible_distribution)) ~ ' ' ~ (ansible_facts.distribution_version | default(ansible_distribution_version)) }}"
            kernel: "{{ (ansible_facts.kernel | default(ansible_system)) ~ ' ' ~ (ansible_facts.kernel_release | default(ansible_kernel)) }}"
            arch: "{{ ansible_facts.architecture | default(ansible_architecture) }}"
            uptime: "{{ uptime_h }}"
            mem_mb: "{{ ansible_facts.memtotal_mb | default(0) }}"
            cpu_vcpus: "{{ ansible_facts.processor_vcpus | default(ansible_facts.processor_count | default(0)) }}"
            mounts: "{{ (ansible_facts.mounts | default([])) | map(attribute='mount') | list }}"
            sysctl_sample: "{{ sysctl_out.stdout_lines | default([]) }}"
            thp: "{{ thp_out.stdout | default('') }}"
            dns: "{{ dns_out.stdout | default('') }}"
          service:
            # de service_facts + systemctl is-enabled
            status: "active={{ _svc_state }}, detail={{ _svc_status }}, enabled={{ svc_enabled.stdout | default('unknown') }}"
            bin_version: "{{ bin_ver.stdout | default('') }}"
            dirs: "{{ dir_out.stdout | default('') }}"
            network: "{{ net_out.stdout | default('') }}"
          postgres:
            basics: "{{ psql_basic.stdout | default('') }}"
            configs: "{{ conf_out.stdout | default('') }}"
            hba_head: "{{ hba_head.stdout | default('') }}"
            accounts: "{{ acc_out.stdout | default('') }}"
            connections: "{{ conns_out.stdout | default('') }}"
            idle_in_txn: "{{ idle_out.stdout | default('') }}"
            db_sizes: "{{ db_sizes.stdout | default('') }}"
            disk: "{{ disk_out.stdout | default('') }}"
            wal: "{{ wal_out.stdout | default('') }}"
            logs: "{{ logs_out.stdout | default('') }}"
            extensions_schemas: "{{ exts_out.stdout | default('') }}"
            schema_details: "{{ schema_out.stdout | default('') }}"
            replication_hot: "{{ repl_hot_out.stdout | default('') }}"

    # ====== Web (Apache + templates) ======
    - name: Instalar Apache (httpd)
      ansible.builtin.systemd:
        name: httpd
        state: started
        enabled: true

    - name: Criar diretório do site
      ansible.builtin.file:
        path: "{{ web_root }}"
        state: directory
        mode: "0755"

    - name: Publicar health.json
      ansible.builtin.template:
        src: "templates/health.json.j2"
        dest: "{{ web_root }}/health.json"
        mode: "0644"

    - name: Publicar CSS
      ansible.builtin.copy:
        src: "templates/styles.css"
        dest: "{{ web_root }}/styles.css"
        mode: "0644"
      notify: reload apache

    - name: Publicar app.js
      ansible.builtin.copy:
        src: "templates/app.js"
        dest: "{{ web_root }}/app.js"
        mode: "0644"
      notify: reload apache

    - name: Publicar index.html
      ansible.builtin.template:
        src: "templates/index.html.j2"
        dest: "{{ web_root }}/index.html"
        mode: "0644"
      notify: reload apache

  handlers:
    - name: reload apache
      ansible.builtin.systemd:
        name: httpd
        state: reloaded
