---
- name: PostgreSQL HealthCheck + Web (Apache + templates)
  hosts: db_servers
  become: true
  gather_facts: true

  vars:
    pg_user: "postgres"
    pg_data_dir: "/var/lib/pgsql/data"
    log_tail_lines: 200
    web_root: "/var/www/html/pg-health"   # DocumentRoot padrão do Apache

  tasks:
    # ====== SO ======
    - name: Uptime humano
      ansible.builtin.set_fact:
        uptime_h: >-
          {{ (ansible_facts.uptime_seconds | int) // 86400 }}d
          {{ ((ansible_facts.uptime_seconds | int) % 86400) // 3600 }}h
          {{ (((ansible_facts.uptime_seconds | int) % 3600) // 60) }}m

    - name: Sysctl relevantes (sem warnings de shell)
      ansible.builtin.shell: |
        sysctl -n vm.swappiness || true
        sysctl -n vm.dirty_background_ratio || true
        sysctl -n vm.dirty_ratio || true
      register: sysctl_out
      changed_when: false

    - name: THP status
      ansible.builtin.shell: |
        E=/sys/kernel/mm/transparent_hugepage/enabled
        D=/sys/kernel/mm/transparent_hugepage/defrag
        echo -n "enabled: "; (test -r "$E" && cat "$E") || echo "n/a"
        echo -n "defrag:  "; (test -r "$D" && cat "$D") || echo "n/a"
      register: thp_out
      changed_when: false

    # ====== PostgreSQL ======
    - name: Postgres básico (via socket)
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        psql -tAc "SELECT version();"                || true
        psql -tAc "SHOW server_version_num;"        || true
        psql -tAc "SHOW listen_addresses;"          || true
        psql -tAc "SHOW port;"                      || true
        psql -tAc "SHOW config_file;"               || true
        psql -tAc "SHOW hba_file;"                  || true
        psql -tAc "SHOW log_directory;"             || true
        psql -tAc "SELECT count(*) FROM pg_stat_activity;" || true
      register: psql_basic
      changed_when: false

    - name: Tamanhos por DB
      become_user: "{{ pg_user }}"
      ansible.builtin.command: >
        psql -tAc
        "SELECT datname, pg_size_pretty(pg_database_size(datname))
         FROM pg_database
         WHERE datistemplate=false
         ORDER BY 2 DESC;"
      register: db_sizes
      changed_when: false

    - name: Últimos erros de log
      become_user: "{{ pg_user }}"
      ansible.builtin.shell: |
        LOGDIR=$(psql -tAc "SHOW log_directory;" | tr -d ' ')
        [ -z "$LOGDIR" ] && exit 0
        LAST=$(ls -1t "{{ pg_data_dir }}/$LOGDIR" 2>/dev/null | head -1)
        tail -n {{ log_tail_lines }} "{{ pg_data_dir }}/$LOGDIR/$LAST" 2>/dev/null | egrep -i "ERROR|FATAL|PANIC" || true
      register: log_errs
      changed_when: false

    # ====== Monta dicionário ======
    - name: Consolidar relatório
      ansible.builtin.set_fact:
        report:
          collected_at: "{{ ansible_date_time.iso8601 }}"
          host: "{{ inventory_hostname }}"
          os:
            distro: "{{ (ansible_facts.distribution | default(ansible_distribution)) ~ ' ' ~ (ansible_facts.distribution_version | default(ansible_distribution_version)) }}"
            # 'kernel' (ex.: Linux) + release (use ansible_kernel como fallback)
            kernel: "{{ (ansible_facts.kernel | default(ansible_system)) ~ ' ' ~ (ansible_facts.kernel_release | default(ansible_kernel)) }}"
            arch: "{{ ansible_facts.architecture | default(ansible_architecture) }}"
            uptime: "{{ uptime_h }}"
            mem_mb: "{{ ansible_facts.memtotal_mb | default(0) }}"
            cpu_vcpus: "{{ ansible_facts.processor_vcpus | default(ansible_facts.processor_count | default(0)) }}"
            mounts: "{{ (ansible_facts.mounts | default([])) | map(attribute='mount') | list }}"
            sysctl_sample: "{{ sysctl_out.stdout_lines | default([]) }}"
            thp: "{{ thp_out.stdout | default('') }}"
          postgres:
            basics: "{{ psql_basic.stdout | default('') }}"
            db_sizes: "{{ db_sizes.stdout | default('') }}"
            recent_errors: "{{ log_errs.stdout | default('') }}"

    # ====== Web (Apache + templates) ======
    - name: Instalar Apache (httpd)
      ansible.builtin.package:
        name: httpd
        state: present

    - name: Criar diretório do site
      ansible.builtin.file:
        path: "{{ web_root }}"
        state: directory
        mode: "0755"

    - name: Publicar JSON (health.json)
      ansible.builtin.template:
        src: "templates/health.json.j2"
        dest: "{{ web_root }}/health.json"
        mode: "0644"

    - name: Publicar css (health.json)
      ansible.builtin.copy:
        src: "templates/style.css"
        dest: "{{ web_root }}/style.css"
        mode: "0644"
      notify: reload apache

    - name: Publicar script.js (opcional)
      ansible.builtin.copy:
        src: "templates/app.js"
        dest: "{{ web_root }}/app.js"
        mode: "0644"
      notify: reload apache

    - name: Publicar página (index.html)
      ansible.builtin.template:
        src: "templates/index.html.j2"
        dest: "{{ web_root }}/index.html"
        mode: "0644"
      notify: reload apache

    - name: Habilitar e subir Apache
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true

  handlers:
    - name: reload apache
      ansible.builtin.service:
        name: httpd
        state: reloaded

