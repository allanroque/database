---
- name: Popular banco com demo_bootstrap.sql (cria DB se faltar)
  hosts: server01.aroque.com.br
  become: true

  vars:
    db_name: "awx"                      # nome do banco
    db_owner: "postgres"                # dono do banco (ajuste se quiser)
    sql_src: "files/demo_bootstrap.sql" # caminho no seu repo
    sql_dst: "/tmp/demo_bootstrap.sql"  # destino no host

  tasks:
    - name: Verificar se o DB existe
      become_user: postgres
      ansible.builtin.command: >
        psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}';"
      register: db_exists
      changed_when: false

    - name: Criar DB (se não existir)
      become_user: postgres
      ansible.builtin.command: >
        createdb -O {{ db_owner }} {{ db_name }}
      when: db_exists.stdout.strip() | length == 0

    - name: Copiar SQL de bootstrap
      ansible.builtin.copy:
        src: "{{ sql_src }}"
        dest: "{{ sql_dst }}"
        mode: "0644"

    - name: Executar SQL (via socket local, usuário postgres)
      become_user: postgres
      ansible.builtin.command: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -f {{ sql_dst }}
      register: runsql
      changed_when: "'ERROR' not in runsql.stderr"

    - name: Sanity check (contagens)
      become_user: postgres
      ansible.builtin.command: >
        psql -tAc "SELECT
          (SELECT count(*) FROM demo.customers),
          (SELECT count(*) FROM demo.products),
          (SELECT count(*) FROM demo.orders),
          (SELECT count(*) FROM demo.order_items);" -d {{ db_name }}
      register: counts
      changed_when: false

    - name: Exibir contagens
      ansible.builtin.debug:
        msg: "customers, products, orders, order_items = {{ counts.stdout }}"

