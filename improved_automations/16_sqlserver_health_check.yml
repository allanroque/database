---
- name: Health Check Completo do SQL Server
  hosts: windows_db_servers
  gather_facts: true

  vars:
    # Configurações do health check
    sql_server_instance: "{{ sql_server_instance | default('MSSQLSERVER') }}"
    sql_server_port: "{{ sql_server_port | default(1433) }}"
    sql_connection_string: "Server=localhost;Database=master;Integrated Security=true;"
    
    # Configurações de relatório
    health_check_output_dir: "C:\\temp\\sql-health"
    health_check_output_file: "health_report.json"
    health_check_html_file: "health_report.html"
    
    # Configurações de coleta
    log_tail_lines: 200
    collect_system_metrics: true
    collect_performance_metrics: true
    collect_security_metrics: true
    
    # Configurações de alertas
    alert_on_errors: true
    alert_on_warnings: true
    alert_email: "{{ alert_email | default('admin@example.com') }}"
    
    # Limites de alerta
    max_connections_threshold: 80
    disk_usage_threshold: 85
    memory_usage_threshold: 80
    cpu_usage_threshold: 80

  pre_tasks:
    - name: Criar diretório de saída
      win_file:
        path: "{{ health_check_output_dir }}"
        state: directory

    - name: Verificar conectividade com SQL Server
      win_shell: |
        try {
          $connection = New-Object System.Data.SqlClient.SqlConnection
          $connection.ConnectionString = "{{ sql_connection_string }}"
          $connection.Open()
          $connection.Close()
          Write-Output "SQL Server connection successful"
        }
        catch {
          Write-Output "SQL Server connection failed: $($_.Exception.Message)"
          exit 1
        }
      register: sql_connectivity
      failed_when: false

  tasks:
    # ===== COLETA DE MÉTRICAS DO SISTEMA =====
    - name: Coletar métricas do sistema operacional
      when: collect_system_metrics | bool
      block:
        - name: Informações básicas do sistema
          set_fact:
            system_info:
              hostname: "{{ ansible_hostname }}"
              os_name: "{{ ansible_os_name }}"
              os_version: "{{ ansible_os_version }}"
              architecture: "{{ ansible_architecture }}"
              processor_count: "{{ ansible_processor_count }}"
              memory_total: "{{ ansible_memtotal_mb }}"

        - name: Coletar uso de disco
          win_shell: |
            Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | ForEach-Object {
              $sizeGB = [math]::Round($_.Size / 1GB, 2)
              $freeGB = [math]::Round($_.FreeSpace / 1GB, 2)
              $usedGB = $sizeGB - $freeGB
              $percentUsed = [math]::Round(($usedGB / $sizeGB) * 100, 2)
              Write-Output "$($_.DeviceID) - Size: ${sizeGB}GB, Used: ${usedGB}GB (${percentUsed}%)"
            }
          register: disk_usage

        - name: Coletar uso de memória
          win_shell: |
            $memory = Get-WmiObject -Class Win32_OperatingSystem
            $totalMB = [math]::Round($memory.TotalVisibleMemorySize / 1024, 2)
            $freeMB = [math]::Round($memory.FreePhysicalMemory, 2)
            $usedMB = $totalMB - $freeMB
            $percentUsed = [math]::Round(($usedMB / $totalMB) * 100, 2)
            Write-Output "Total: ${totalMB}MB, Used: ${usedMB}MB (${percentUsed}%)"
          register: memory_usage

        - name: Coletar uso de CPU
          win_shell: |
            $cpu = Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average
            Write-Output $cpu.Average
          register: cpu_usage

        - name: Coletar processos SQL Server
          win_shell: |
            Get-Process | Where-Object {$_.ProcessName -like "*sql*" -or $_.ProcessName -like "*mssql*"} | Measure-Object | Select-Object Count
          register: sql_processes

    # ===== COLETA DE MÉTRICAS DO SQL SERVER =====
    - name: Coletar métricas do SQL Server
      when: sql_connectivity.rc == 0
      block:
        - name: Informações básicas do SQL Server
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== VERSÃO ==="
            Write-Output $smo.Version
            Write-Output $smo.Edition
            Write-Output "=== CONFIGURAÇÕES ==="
            Write-Output "Instance: $($smo.InstanceName)"
            Write-Output "Port: $($smo.Settings.LoginMode)"
            Write-Output "Collation: $($smo.Collation)"
            Write-Output "Max Memory: $($smo.Configuration.MaxServerMemory.ConfigValue) MB"
            Write-Output "Min Memory: $($smo.Configuration.MinServerMemory.ConfigValue) MB"
          register: sql_basic_info

        - name: Status dos serviços SQL Server
          win_service:
            name: "MSSQL${{ sql_server_instance }}"
          register: sql_service_status

        - name: Status do SQL Server Agent
          win_service:
            name: "SQLAgent${{ sql_server_instance }}"
          register: sql_agent_status

        - name: Conexões e sessões
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== CONEXÕES ==="
            Write-Output "Max Connections: $($smo.Settings.MaxConnections)"
            Write-Output "Current Connections: $($smo.NumberOfActiveConnections)"
            
            $sessions = $smo.EnumProcesses()
            Write-Output "Total Sessions: $($sessions.Count)"
            
            $blockedSessions = $sessions | Where-Object {$_.BlockedBy -ne 0}
            Write-Output "Blocked Sessions: $($blockedSessions.Count)"
          register: sql_connections

        - name: Bancos de dados e usuários
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== BANCOS DE DADOS ==="
            $databases = $smo.Databases | Where-Object {$_.IsSystemObject -eq $false}
            $databases | ForEach-Object {
              $sizeMB = [math]::Round($_.Size, 2)
              Write-Output "$($_.Name) - Size: ${sizeMB}MB - Status: $($_.Status) - Recovery: $($_.RecoveryModel)"
            }
            
            Write-Output "=== USUÁRIOS ==="
            $logins = $smo.Logins | Where-Object {$_.LoginType -eq 'SqlLogin'}
            $logins | ForEach-Object {
              Write-Output "$($_.Name) - DefaultDB: $($_.DefaultDatabase) - Disabled: $($_.IsDisabled)"
            }
          register: sql_databases_users

        - name: Performance e configurações
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== PERFORMANCE ==="
            Write-Output "Max Server Memory: $($smo.Configuration.MaxServerMemory.ConfigValue) MB"
            Write-Output "Min Server Memory: $($smo.Configuration.MinServerMemory.ConfigValue) MB"
            Write-Output "Max Degree of Parallelism: $($smo.Configuration.MaxDegreeOfParallelism.ConfigValue)"
            Write-Output "Cost Threshold for Parallelism: $($smo.Configuration.CostThresholdForParallelism.ConfigValue)"
            
            Write-Output "=== BUFFER POOL ==="
            $bufferPool = $smo.EnumValues('Buffer Pool')
            Write-Output "Buffer Pool Size: $($bufferPool | Where-Object {$_.Name -eq 'Buffer Pool Size'}).Value MB"
          register: sql_performance

        - name: Logs e erros recentes
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== ÚLTIMOS ERROS ==="
            $query = @"
            SELECT TOP 20 
                LogDate,
                ProcessInfo,
                Text
            FROM sys.fn_get_audit_file('C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Log\ERRORLOG*', NULL, NULL)
            WHERE Text LIKE '%Error%' OR Text LIKE '%Failed%' OR Text LIKE '%Exception%'
            ORDER BY LogDate DESC
"@
            try {
              $results = $smo.Databases['master'].ExecuteWithResults($query)
              $results.Tables[0] | ForEach-Object { "$($_.LogDate) - $($_.ProcessInfo): $($_.Text)" }
            }
            catch {
              Write-Output "Erro ao consultar logs: $($_.Exception.Message)"
            }
          register: sql_logs

    # ===== COLETA DE MÉTRICAS DE SEGURANÇA =====
    - name: Coletar métricas de segurança
      when: collect_security_metrics | bool
      block:
        - name: Verificar configurações de segurança
          win_shell: |
            Import-Module SqlServer
            $smo = New-Object Microsoft.SqlServer.Management.Smo.Server "localhost"
            
            Write-Output "=== SEGURANÇA ==="
            Write-Output "Login Mode: $($smo.Settings.LoginMode)"
            Write-Output "Audit Level: $($smo.Settings.AuditLevel)"
            
            $loginsWithoutPassword = $smo.Logins | Where-Object {$_.LoginType -eq 'SqlLogin' -and $_.PasswordHash -eq $null}
            Write-Output "Logins without password: $($loginsWithoutPassword.Count)"
            
            $disabledLogins = $smo.Logins | Where-Object {$_.IsDisabled -eq $true}
            Write-Output "Disabled logins: $($disabledLogins.Count)"
          register: sql_security

    # ===== ANÁLISE E ALERTAS =====
    - name: Analisar métricas e gerar alertas
      set_fact:
        health_alerts: []
        health_warnings: []

    - name: Verificar uso de conexões
      when: sql_connectivity.rc == 0
      set_fact:
        health_alerts: "{{ health_alerts + ['Uso de conexões alto: ' + (sql_connections.stdout | regex_search('Current Connections: (\\d+)') | regex_replace('Current Connections: ', '') | int | string) + ' conexões ativas'] }}"
      when: 
        - sql_connections.stdout is defined
        - (sql_connections.stdout | regex_search('Current Connections: (\\d+)') | regex_replace('Current Connections: ', '') | int) > max_connections_threshold

    - name: Verificar uso de disco
      when: disk_usage.stdout is defined
      set_fact:
        health_warnings: "{{ health_warnings + ['Uso de disco alto: ' + (disk_usage.stdout | regex_search('(\\d+\\.\\d+)%') | string)] }}"
      when: 
        - disk_usage.stdout is defined
        - (disk_usage.stdout | regex_search('(\\d+\\.\\d+)%') | regex_replace('%', '') | float) > disk_usage_threshold

    - name: Verificar serviços SQL Server
      when: sql_service_status.status.State != 'Running'
      set_fact:
        health_alerts: "{{ health_alerts + ['Serviço SQL Server não está rodando'] }}"

    # ===== GERAÇÃO DO RELATÓRIO =====
    - name: Consolidar relatório de health check
      set_fact:
        health_report:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          host: "{{ inventory_hostname }}"
          sql_server_accessible: "{{ sql_connectivity.rc == 0 }}"
          system:
            info: "{{ system_info | default({}) }}"
            disk_usage: "{{ disk_usage.stdout | default('') }}"
            memory_usage: "{{ memory_usage.stdout | default('') }}"
            cpu_usage: "{{ cpu_usage.stdout | default('') }}"
            sql_processes: "{{ sql_processes.stdout | default('0') }}"
          sql_server:
            service_status: "{{ sql_service_status.status | default({}) }}"
            agent_status: "{{ sql_agent_status.status | default({}) }}"
            basic_info: "{{ sql_basic_info.stdout | default('') }}"
            connections: "{{ sql_connections.stdout | default('') }}"
            databases_users: "{{ sql_databases_users.stdout | default('') }}"
            performance: "{{ sql_performance.stdout | default('') }}"
            logs: "{{ sql_logs.stdout | default('') }}"
            security: "{{ sql_security.stdout | default('') }}"
          alerts:
            critical: "{{ health_alerts | default([]) }}"
            warnings: "{{ health_warnings | default([]) }}"
          summary:
            total_alerts: "{{ (health_alerts | default([])) | length }}"
            total_warnings: "{{ (health_warnings | default([])) | length }}"
            overall_status: "{{ 'CRITICAL' if (health_alerts | default([])) | length > 0 else ('WARNING' if (health_warnings | default([])) | length > 0 else 'HEALTHY') }}"

    - name: Salvar relatório JSON
      win_copy:
        content: "{{ health_report | to_nice_json }}"
        dest: "{{ health_check_output_dir }}\\{{ health_check_output_file }}"

    - name: Gerar relatório HTML
      win_template:
        src: templates/sqlserver_health_report.html.j2
        dest: "{{ health_check_output_dir }}\\{{ health_check_html_file }}"

  post_tasks:
    - name: Exibir resumo do health check
      debug:
        msg: |
          === HEALTH CHECK SQL SERVER ===
          Host: {{ inventory_hostname }}
          Status: {{ health_report.summary.overall_status }}
          SQL Server: {{ 'ACESSÍVEL' if health_report.sql_server_accessible else 'INACESSÍVEL' }}
          Alertas Críticos: {{ health_report.summary.total_alerts }}
          Avisos: {{ health_report.summary.total_warnings }}
          Relatórios salvos em: {{ health_check_output_dir }}

    - name: Exibir alertas críticos
      when: health_alerts | length > 0
      debug:
        msg: "ALERTAS CRÍTICOS: {{ health_alerts }}"

    - name: Exibir avisos
      when: health_warnings | length > 0
      debug:
        msg: "AVISOS: {{ health_warnings }}"
