---
- name: Criar usuário sistêmico no PostgreSQL (via Survey AAP)
  hosts: db_servers
  become: true

  vars:
    # >>>> Estes virão do Survey <<<<
    db_name: "{{ target_database | default('awx') }}"
    schema_name: "{{ target_schema | default('public') }}"
    db_username: "{{ username }}"
    db_user_password: "{{ user_password }}"
    access_profile: "{{ profile | default('readonly') }}"   # readonly | readwrite | dbadmin

    # Hardening opcional do usuário sistêmico
    role_conn_limit: "{{ conn_limit | default(10) }}"
    role_stmt_timeout: "{{ stmt_timeout | default('5min') }}"
    role_valid_until: "{{ valid_until | default('infinity') }}"  # ex: '2025-12-31'

  tasks:
    - name: Verificar se o usuário já existe
      become_user: postgres
      ansible.builtin.command: >
        psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ db_username }}';"
      register: user_exists
      changed_when: false

    - name: Criar usuário com senha (se não existir)
      become_user: postgres
      no_log: true
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -c
        "CREATE ROLE {{ db_username }} WITH LOGIN PASSWORD '{{ db_user_password }}'
         NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT CONNECTION LIMIT {{ role_conn_limit }} VALID UNTIL '{{ role_valid_until }}';"
      when: user_exists.stdout.strip() | length == 0

    - name: (Opcional) Ajustar parâmetros de sessão do usuário sistêmico
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -c
        "ALTER ROLE {{ db_username }}
           SET search_path TO {{ schema_name }},public;
         ALTER ROLE {{ db_username }}
           SET statement_timeout TO '{{ role_stmt_timeout }}';"
      changed_when: false

    # ===== Conceder CONNECT no banco =====
    - name: Garantir CONNECT no banco
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "GRANT CONNECT ON DATABASE {{ db_name }} TO {{ db_username }};"
      changed_when: false

    # ===== Concessões por perfil =====
    # Perfis:
    # - readonly: USAGE no schema, SELECT em tabelas/seq; default privileges SELECT/USAGE
    # - readwrite: USAGE+CREATE no schema, SELECT/INSERT/UPDATE/DELETE; seq USAGE/UPDATE; defaults idem
    # - dbadmin: ALL no schema, ALL em tabelas/seq; pensar bem antes de usar em prod

    - name: Conceder privilégios no schema (perfil)
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "{% if access_profile == 'readonly' -%}
           GRANT USAGE ON SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'readwrite' -%}
           GRANT USAGE, CREATE ON SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'dbadmin' -%}
           GRANT ALL ON SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- endif %}"
      changed_when: false

    - name: Privilégios nas TABELAS existentes (perfil)
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "{% if access_profile == 'readonly' -%}
           GRANT SELECT ON ALL TABLES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'readwrite' -%}
           GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'dbadmin' -%}
           GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- endif %}"
      changed_when: false

    - name: Privilégios nas SEQUÊNCIAS existentes (perfil)
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "{% if access_profile == 'readonly' -%}
           GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'readwrite' -%}
           GRANT USAGE, SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- elif access_profile == 'dbadmin' -%}
           GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA {{ schema_name }} TO {{ db_username }};
         {%- endif %}"
      changed_when: false

    - name: Default Privileges para futuros objetos (TABELAS)
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "{% if access_profile == 'readonly' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT SELECT ON TABLES TO {{ db_username }};
         {%- elif access_profile == 'readwrite' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO {{ db_username }};
         {%- elif access_profile == 'dbadmin' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT ALL PRIVILEGES ON TABLES TO {{ db_username }};
         {%- endif %}"
      changed_when: false

    - name: Default Privileges para futuros objetos (SEQUÊNCIAS)
      become_user: postgres
      ansible.builtin.shell: >
        psql -v ON_ERROR_STOP=1 -d {{ db_name }} -c
        "{% if access_profile == 'readonly' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT USAGE, SELECT ON SEQUENCES TO {{ db_username }};
         {%- elif access_profile == 'readwrite' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT USAGE, SELECT, UPDATE ON SEQUENCES TO {{ db_username }};
         {%- elif access_profile == 'dbadmin' -%}
           ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema_name }}
             GRANT ALL PRIVILEGES ON SEQUENCES TO {{ db_username }};
         {%- endif %}"
      changed_when: false

    - name: Confirmar criação e perfil aplicado
      ansible.builtin.debug:
        msg: >
          Usuário '{{ db_username }}' criado/atualizado.
          Perfil aplicado: '{{ access_profile }}' em DB='{{ db_name }}' schema='{{ schema_name }}'.
        register: create_user_output

#    - set_stats:
#        data:
#          sn_close_notes: "{{ create_user_output.stdout }}"